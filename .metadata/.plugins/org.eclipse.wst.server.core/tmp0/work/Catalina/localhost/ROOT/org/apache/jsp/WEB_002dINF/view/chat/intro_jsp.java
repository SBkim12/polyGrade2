/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2021-04-01 10:00:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import poly.util.CmmUtil;

public final class intro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("poly.util.CmmUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

	String room_name = CmmUtil.nvl((String) session.getAttribute("SS_ROOM_NAME"));

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<script src=\"/js/annyang.js\"></script>\n");
      out.write("<script src=\"/js/jquery-3.4.1.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\t// html의 모든 객체(태그)들이 로딩이 완료된 경우 실행함\n");
      out.write("\t$(window).on(\"load\", function() {\n");
      out.write("\n");
      out.write("\t\t//화면 로딩이 완료되면 첫번째로 실행함\n");
      out.write("\t\tgetRoomList();\n");
      out.write("\t\t\n");
      out.write("\t\t//2번쨰부터 채팅방 전체리스트를 5초마다 로딩함\n");
      out.write("\t\tsetInterval(\"getRoomList()\", 5000);\n");
      out.write("\n");
      out.write("\t});\n");
      out.write("\n");
      out.write("\t//전체 채팅방 리스트 가져오기(채팅 내용도 같이 가져옴)\n");
      out.write("\tfunction getRoomList() {\n");
      out.write("\t\t//Ajax 호출\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : \"/chat/roomList.do\",\n");
      out.write("\t\t\ttype : \"post\",\n");
      out.write("\t\t\tdataType : \"JSON\",\n");
      out.write("\t\t\tsuccess : function(json) {\n");
      out.write("\n");
      out.write("\t\t\t\tvar roomList = \"\";\n");
      out.write("\n");
      out.write("\t\t\t\tfor (var i = 0; i < json.length; i++) {\n");
      out.write("\t\t\t\t\troomList += (json[i] + \"<br>\");\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t$(\"#room_list\").html(roomList);\n");
      out.write("\n");
      out.write("\t\t\t\t/*\n");
      out.write("\t\t\t\tAjax는 비동기 처리 기술로 동시에 여러개의 Ajax가 실행되면, 충돌나서 에러 발생함\n");
      out.write("\t\t\t\t보통 자바스크립트에서 제공하는 Promise를 통해 할수 있지만, \n");
      out.write("\t\t\t\t간단한 화면은 Ajax의 실행 성공 함수에 함수 추가하는 것이 좋음 \n");
      out.write("\t\t\t\t */\n");
      out.write("\t\t\t\tgetAllMsg(); //전체 대화 가져오기\n");
      out.write("\t\t\t}\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t//채팅방 전체 대화 가져오기\n");
      out.write("\tfunction getAllMsg() {\n");
      out.write("\n");
      out.write("\t\t//Ajax 호출\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : \"/chat/getMsg.do\",\n");
      out.write("\t\t\ttype : \"post\",\n");
      out.write("\t\t\tdataType : \"JSON\",\n");
      out.write("\t\t\tdata : $(\"form\").serialize(),\n");
      out.write("\t\t\tsuccess : function(json) {\n");
      out.write("\n");
      out.write("\t\t\t\t$(\"#view_json\").html(\"getAllMsg : \" + json);\n");
      out.write("\n");
      out.write("\t\t\t\t//메시지 출력하기\n");
      out.write("\t\t\t\tdoOutputMsg(json);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t})\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// 대화 메시지 전체 출력하기\n");
      out.write("\tfunction doOutputMsg(json) {\n");
      out.write("\n");
      out.write("\t\t// 메시지 대화가 존재하면 출력\n");
      out.write("\t\tif (json != null) {\n");
      out.write("\t\t\tvar msgResult = \"\";\n");
      out.write("\n");
      out.write("\t\t\tfor (var i = 0; i < json.length; i++) {\n");
      out.write("\t\t\t\tmsgResult += (json[i].msg);\n");
      out.write("\t\t\t\tmsgResult += (\" | \" + json[i].userNm)\n");
      out.write("\t\t\t\tmsgResult += (\" | \" + json[i].dateTime + \"<br/>\");\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t$(\"#total_msg\").html(msgResult);\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t/*\n");
      out.write("\t#########################################################################\n");
      out.write("\t\t\t\t\t\t\t\t\t음성 인식 관련 소스 시작\n");
      out.write("\t#########################################################################\n");
      out.write("\t */\n");
      out.write("\t//annyang 라이브러리 실행\n");
      out.write("\tannyang.start({\n");
      out.write("\t\tautoRestart : true,\n");
      out.write("\t\tcontinuous : true\n");
      out.write("\t})\n");
      out.write("\n");
      out.write("\t//음성인식 값 받아오기위한 객체 생성\n");
      out.write("\tvar recognition = annyang.getSpeechRecognizer();\n");
      out.write("\n");
      out.write("\t//최종 음성인식 결과값 저장 변수\n");
      out.write("\tvar final_transcript = \"\";\n");
      out.write("\n");
      out.write("\t//말하는 동안에 인식되는 값 가져오기(허용)\n");
      out.write("\trecognition.interimResults = false;\n");
      out.write("\n");
      out.write("\t//음성 인식결과 가져오기\n");
      out.write("\trecognition.onresult = function(event) {\n");
      out.write("\t\tvar interim_transcript = \"\";\n");
      out.write("\t\tfinal_transcript = \"\";\n");
      out.write("\t\tfor (var i = event.resultIndex; i < event.results.length; ++i) {\n");
      out.write("\t\t\tif (event.results[i].isFinal) {\n");
      out.write("\t\t\t\tfinal_transcript += event.results[i][0].transcript;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\t$(\"#view_msg\").html(final_transcript);\n");
      out.write("\t\t$(\"#send_msg\").val(final_transcript);\n");
      out.write("\n");
      out.write("\t\t//Ajax 호출\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : \"/chat/msg.do\",\n");
      out.write("\t\t\ttype : \"post\",\n");
      out.write("\t\t\tdataType : \"JSON\",\n");
      out.write("\t\t\tdata : $(\"form\").serialize(),\n");
      out.write("\t\t\tsuccess : function(json) {\n");
      out.write("\n");
      out.write("\t\t\t\t$(\"#view_json\").html(\"msg : \" + json);\n");
      out.write("\n");
      out.write("\t\t\t\t//메시지 출력하기\n");
      out.write("\t\t\t\tdoOutputMsg(json);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\t/*\n");
      out.write("\t#########################################################################\n");
      out.write("\t\t\t\t\t\t\t\t\t음성 인식 관련 소스 끝\n");
      out.write("\t#########################################################################\n");
      out.write("\t */\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h1>\n");
      out.write("\t\t[");
      out.print(room_name);
      out.write("] 채팅방 '음성대화' 전체 내용\n");
      out.write("\t</h1>\n");
      out.write("\t<hr />\n");
      out.write("\t<div id=\"total_msg\"></div>\n");
      out.write("\n");
      out.write("\t<h1>내가 방금 말한 전송 메시지</h1>\n");
      out.write("\t<hr />\n");
      out.write("\t<div id=\"view_msg\"></div>\n");
      out.write("\t<br />\n");
      out.write("\t<h1>채팅방 전체 리스트</h1>\n");
      out.write("\t<hr />\n");
      out.write("\t<div id=\"room_list\"></div>\n");
      out.write("\n");
      out.write("\t<!-- 음성 인식 데이터를 전송하기 위한 폼 -->\n");
      out.write("\t<form name=\"form\" method=\"post\">\n");
      out.write("\t\t<input type=\"hidden\" name=\"send_msg\" id=\"send_msg\" />\n");
      out.write("\t</form>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
